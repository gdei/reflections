When would you want to use a remote repository rather than keeping all your work local?
    When sharing work with others or working on the same project from multiple computers.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
    When several people are working simultaneosly on a project, another one might do updates to the remote while I have uncommitted local changes. Those would be lost if all changes to the remote would be pulled automatically, so I would rather do that manually.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
    A branch is a separate line of development within a repository. I would use it for developing different flavours of a project, like stable, testing and unstable.
    A clone is an exact copy of a repository that's meant to stay in sync with the original. I would use it for cloning a remote to my workstation or to multiple computers when I have write acces to the remote.
    A fork is like a clone, but without write access to the original repository. I would use it for cloning other people's projects when I want to fork off my own line of development.

What is the benefit of having a copy of the last known state of the remote stored locally?
    You're able to see if you're ahead of the remote.

How would you collaborate without using Git or GitHub? What would be easier,
and what would be harder?
    I'd probably use another version control system, although I haven't used
one in collaboration yet, so I can't say anything about the differences.
    Another option would be to have a common file repository and copy and
paste files between there and my own computer - that would be plain ugly...

When would you want to make changes in a separate branch rather than directly
in master? What benefits does each approach have?
    I'd use a master branch when making greater changes to the code that could
affect the code stability, e.g. a development version. Branching allows
playing around and testing stuff while keeping a stable running version in the
master branch.


