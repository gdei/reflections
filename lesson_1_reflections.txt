How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    I don't need to look at the lines that didn't change between the versions to find the bug

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    It allows to access code snippets that were deleted in a former version, but can be useful now again. It also allows to see for what purpuse a certain change has been made.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Pro: Control over adding coherent changes to a commit
    Con: Danger of forgetting to save

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    In software programming, often one project contains multiple files, so you have to change more than one file to achieve a desired functionality and the files are interdependent. Google Docs is targeted more towards cases where files are not interdependent.

How can you use the commands git log and git diff to view the history of files?

    git log shows the history of commits with the respective comments, git diff shows the differences introduced between two versions.

How might using version control make you more confident to make changes that
could break something?

    Version control makes it possible to revert to a known working state. It also allows to show the changes made since the last working state and thus helps to find the bugs.

Now that you have your workspace set up, what do you want to try using Git for?

    For managing network device config.
